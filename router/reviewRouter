const express=require('express');
const router=express.Router({mergeParams:true});

const {reviewSchema}= require('../validateSchema.js');
const catchAsync= require('../utils/catchAsync.js');
const Campground=require('../models/model');
const Review=require('../models/reviewModel');
const ExpressError= require('../utils/ExpressError.js');
const {isLoggedIn}=require('../middleware');


const validateReview = (req, res, next) => {
    const { error } = reviewSchema.validate(req.body);
    if (error) {
        const msg = error.details.map(el => el.message).join(',')
        throw new ExpressError(msg, 400)
    } else {
        next();
    }
}



router.post('/',validateReview,isLoggedIn,catchAsync(async(req,res)=>{
    const campground = await Campground.findById(req.params.id);
    const review = new Review(req.body.review);
    review.author = req.user._id;
    console.log(review);
    campground.review.push(review);
    await review.save();
    await campground.save();
    req.flash('success', 'Created new review!');
    res.redirect(`/campgrounds/${campground._id}`);


}))
router.delete('/:reviewid',isLoggedIn,catchAsync(async(req,res)=>{
    const {id,reviewid}=req.params;
    await Campground.findByIdAndUpdate(id,{$pull: { review:reviewid }});
    await Review.findByIdAndDelete(reviewid);
    
    res.redirect(`/campgrounds/${id}`);
}))

module.exports=router;